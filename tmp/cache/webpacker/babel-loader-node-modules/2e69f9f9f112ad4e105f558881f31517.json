{"ast":null,"code":"'use strict';\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Slider = exports.sliderFactory = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _classnames2 = require('classnames');\n\nvar _classnames3 = _interopRequireDefault(_classnames2);\n\nvar _reactStyleProptype = require('react-style-proptype');\n\nvar _reactStyleProptype2 = _interopRequireDefault(_reactStyleProptype);\n\nvar _reactCssThemr = require('react-css-themr');\n\nvar _utils = require('../utils/utils');\n\nvar _identifiers = require('../identifiers');\n\nvar _events = require('../utils/events');\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _ProgressBar = require('../progress_bar/ProgressBar');\n\nvar _ProgressBar2 = _interopRequireDefault(_ProgressBar);\n\nvar _Input = require('../input/Input');\n\nvar _Input2 = _interopRequireDefault(_Input);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (_typeof(call) === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + _typeof(superClass));\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar KEYS = {\n  ENTER: 'Enter',\n  ESC: 'Escape',\n  ARROW_UP: 'ArrowUp',\n  ARROW_DOWN: 'ArrowDown'\n};\n\nvar factory = function factory(ProgressBar, Input) {\n  var Slider = function (_Component) {\n    _inherits(Slider, _Component);\n\n    function Slider() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, Slider);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Slider.__proto__ || Object.getPrototypeOf(Slider)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n        inputFocused: false,\n        inputValue: null,\n        sliderLength: 0,\n        sliderStart: 0\n      }, _this.handleInputFocus = function () {\n        _this.setState({\n          inputFocused: true,\n          inputValue: _this.valueForInput(_this.props.value)\n        });\n      }, _this.handleInputChange = function (value) {\n        _this.setState({\n          inputValue: value\n        });\n      }, _this.handleInputBlur = function (event) {\n        var value = _this.state.inputValue || 0;\n\n        _this.setState({\n          inputFocused: false,\n          inputValue: null\n        }, function () {\n          _this.props.onChange(_this.trimValue(value), event);\n        });\n      }, _this.handleKeyDown = function (event) {\n        var _this$props = _this.props,\n            disabled = _this$props.disabled,\n            step = _this$props.step;\n        var ARROW_DOWN = KEYS.ARROW_DOWN,\n            ARROW_UP = KEYS.ARROW_UP,\n            ENTER = KEYS.ENTER,\n            ESC = KEYS.ESC;\n        if (disabled) return;\n        if ([ENTER, ESC].includes(event.code)) _this.inputNode.blur();\n        if (event.code === ARROW_UP) _this.addToValue(step);\n        if (event.code === ARROW_DOWN) _this.addToValue(-step);\n      }, _this.handleMouseDown = function (event) {\n        if (_this.state.inputFocused) _this.inputNode.blur();\n\n        _events2[\"default\"].addEventsToDocument(_this.getMouseEventMap());\n\n        _this.start(_events2[\"default\"].getMousePosition(event));\n\n        _events2[\"default\"].pauseEvent(event);\n      }, _this.handleMouseMove = function (event) {\n        _events2[\"default\"].pauseEvent(event);\n\n        _this.move(_events2[\"default\"].getMousePosition(event));\n      }, _this.handleMouseUp = function () {\n        _this.end(_this.getMouseEventMap());\n      }, _this.handleResize = function (event, callback) {\n        var _ReactDOM$findDOMNode = _reactDom2[\"default\"].findDOMNode(_this.progressbarNode).getBoundingClientRect(),\n            left = _ReactDOM$findDOMNode.left,\n            right = _ReactDOM$findDOMNode.right;\n\n        var cb = callback || function () {};\n\n        _this.setState({\n          sliderStart: left,\n          sliderLength: right - left\n        }, cb);\n      }, _this.handleSliderBlur = function () {\n        _events2[\"default\"].removeEventsFromDocument(_this.getKeyboardEvents());\n      }, _this.handleSliderFocus = function () {\n        _events2[\"default\"].addEventsToDocument(_this.getKeyboardEvents());\n      }, _this.handleTouchEnd = function () {\n        _this.end(_this.getTouchEventMap());\n      }, _this.handleTouchMove = function (event) {\n        _this.move(_events2[\"default\"].getTouchPosition(event));\n      }, _this.handleTouchStart = function (event) {\n        if (_this.state.inputFocused) _this.inputNode.blur();\n\n        _this.start(_events2[\"default\"].getTouchPosition(event));\n\n        _events2[\"default\"].addEventsToDocument(_this.getTouchEventMap());\n\n        _events2[\"default\"].pauseEvent(event);\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    _createClass(Slider, [{\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        window.addEventListener('resize', this.handleResize);\n        this.handleResize();\n      }\n    }, {\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(nextProps) {\n        if (this.state.inputFocused && this.props.value !== nextProps.value) {\n          this.setState({\n            inputValue: this.valueForInput(nextProps.value)\n          });\n        }\n      }\n    }, {\n      key: 'shouldComponentUpdate',\n      value: function shouldComponentUpdate(nextProps, nextState) {\n        return this.state.inputFocused || !nextState.inputFocused;\n      }\n    }, {\n      key: 'componentWillUpdate',\n      value: function componentWillUpdate(nextProps, nextState) {\n        if (nextState.pressed !== this.state.pressed) {\n          if (nextState.pressed) {\n            this.props.onDragStart();\n          } else {\n            this.props.onDragStop();\n          }\n        }\n      }\n    }, {\n      key: 'componentWillUnmount',\n      value: function componentWillUnmount() {\n        window.removeEventListener('resize', this.handleResize);\n\n        _events2[\"default\"].removeEventsFromDocument(this.getMouseEventMap());\n\n        _events2[\"default\"].removeEventsFromDocument(this.getTouchEventMap());\n\n        _events2[\"default\"].removeEventsFromDocument(this.getKeyboardEvents());\n      }\n    }, {\n      key: 'getKeyboardEvents',\n      value: function getKeyboardEvents() {\n        return {\n          keydown: this.handleKeyDown\n        };\n      }\n    }, {\n      key: 'getMouseEventMap',\n      value: function getMouseEventMap() {\n        return {\n          mousemove: this.handleMouseMove,\n          mouseup: this.handleMouseUp\n        };\n      }\n    }, {\n      key: 'getTouchEventMap',\n      value: function getTouchEventMap() {\n        return {\n          touchmove: this.handleTouchMove,\n          touchend: this.handleTouchEnd\n        };\n      }\n    }, {\n      key: 'addToValue',\n      value: function addToValue(increment) {\n        var value = this.state.inputFocused ? parseFloat(this.state.inputValue) : this.props.value;\n        value = this.trimValue(value + increment);\n        if (value !== this.props.value) this.props.onChange(value);\n      }\n    }, {\n      key: 'end',\n      value: function end(revents) {\n        _events2[\"default\"].removeEventsFromDocument(revents);\n\n        this.setState({\n          pressed: false\n        });\n      }\n    }, {\n      key: 'knobOffset',\n      value: function knobOffset() {\n        var _props = this.props,\n            max = _props.max,\n            min = _props.min,\n            value = _props.value;\n        return 100 * ((value - min) / (max - min));\n      }\n    }, {\n      key: 'move',\n      value: function move(position) {\n        var newValue = this.positionToValue(position);\n        if (newValue !== this.props.value) this.props.onChange(newValue);\n      }\n    }, {\n      key: 'positionToValue',\n      value: function positionToValue(position) {\n        var _state = this.state,\n            start = _state.sliderStart,\n            length = _state.sliderLength;\n        var _props2 = this.props,\n            max = _props2.max,\n            min = _props2.min,\n            step = _props2.step;\n        var pos = (position.x - start) / length * (max - min);\n        return this.trimValue(Math.round(pos / step) * step + min);\n      }\n    }, {\n      key: 'start',\n      value: function start(position) {\n        var _this2 = this;\n\n        this.handleResize(null, function () {\n          _this2.setState({\n            pressed: true\n          });\n\n          _this2.props.onChange(_this2.positionToValue(position));\n        });\n      }\n    }, {\n      key: 'stepDecimals',\n      value: function stepDecimals() {\n        return (this.props.step.toString().split('.')[1] || []).length;\n      }\n    }, {\n      key: 'trimValue',\n      value: function trimValue(value) {\n        if (value < this.props.min) return this.props.min;\n        if (value > this.props.max) return this.props.max;\n        return (0, _utils.round)(value, this.stepDecimals());\n      }\n    }, {\n      key: 'valueForInput',\n      value: function valueForInput(value) {\n        var decimals = this.stepDecimals();\n        return decimals > 0 ? value.toFixed(decimals) : value.toString();\n      }\n    }, {\n      key: 'renderSnaps',\n      value: function renderSnaps() {\n        var _this3 = this;\n\n        if (!this.props.snaps) return undefined;\n        return _react2[\"default\"].createElement('div', {\n          className: this.props.theme.snaps\n        }, (0, _utils.range)(0, (this.props.max - this.props.min) / this.props.step).map(function (i) {\n          return _react2[\"default\"].createElement('div', {\n            key: 'span-' + i,\n            className: _this3.props.theme.snap\n          });\n        }));\n      }\n    }, {\n      key: 'renderInput',\n      value: function renderInput() {\n        var _this4 = this;\n\n        if (!this.props.editable) return undefined;\n        return _react2[\"default\"].createElement(Input, {\n          innerRef: function innerRef(node) {\n            _this4.inputNode = node;\n          },\n          className: this.props.theme.input,\n          disabled: this.props.disabled,\n          onFocus: this.handleInputFocus,\n          onChange: this.handleInputChange,\n          onBlur: this.handleInputBlur,\n          value: this.state.inputFocused ? this.state.inputValue : this.valueForInput(this.props.value)\n        });\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _classnames,\n            _this5 = this;\n\n        var theme = this.props.theme;\n        var knobStyles = {\n          left: this.knobOffset() + '%'\n        };\n        var className = (0, _classnames3[\"default\"])(theme.slider, (_classnames = {}, _defineProperty(_classnames, theme.editable, this.props.editable), _defineProperty(_classnames, theme.disabled, this.props.disabled), _defineProperty(_classnames, theme.pinned, this.props.pinned), _defineProperty(_classnames, theme.pressed, this.state.pressed), _defineProperty(_classnames, theme.ring, this.props.value === this.props.min), _classnames), this.props.className);\n        return _react2[\"default\"].createElement('div', {\n          className: className,\n          disabled: this.props.disabled,\n          'data-react-toolbox': 'slider',\n          onBlur: this.handleSliderBlur,\n          onFocus: this.handleSliderFocus,\n          style: this.props.style,\n          tabIndex: '0'\n        }, _react2[\"default\"].createElement('div', {\n          ref: function ref(node) {\n            _this5.sliderNode = node;\n          },\n          className: theme.container,\n          onMouseDown: this.handleMouseDown,\n          onTouchStart: this.handleTouchStart\n        }, _react2[\"default\"].createElement('div', {\n          ref: function ref(node) {\n            _this5.knobNode = node;\n          },\n          className: theme.knob,\n          onMouseDown: this.handleMouseDown,\n          onTouchStart: this.handleTouchStart,\n          style: knobStyles\n        }, _react2[\"default\"].createElement('div', {\n          className: theme.innerknob,\n          'data-value': parseInt(this.props.value, 10)\n        })), _react2[\"default\"].createElement('div', {\n          className: theme.progress\n        }, _react2[\"default\"].createElement(ProgressBar, {\n          disabled: this.props.disabled,\n          ref: function ref(node) {\n            _this5.progressbarNode = node;\n          },\n          className: theme.innerprogress,\n          max: this.props.max,\n          min: this.props.min,\n          mode: 'determinate',\n          value: this.props.value,\n          buffer: this.props.buffer\n        }), this.renderSnaps())), this.renderInput());\n      }\n    }]);\n\n    return Slider;\n  }(_react.Component);\n\n  Slider.propTypes = {\n    buffer: _propTypes2[\"default\"].number,\n    className: _propTypes2[\"default\"].string,\n    disabled: _propTypes2[\"default\"].bool,\n    editable: _propTypes2[\"default\"].bool,\n    max: _propTypes2[\"default\"].number,\n    min: _propTypes2[\"default\"].number,\n    onChange: _propTypes2[\"default\"].func,\n    onDragStart: _propTypes2[\"default\"].func,\n    onDragStop: _propTypes2[\"default\"].func,\n    pinned: _propTypes2[\"default\"].bool,\n    snaps: _propTypes2[\"default\"].bool,\n    step: _propTypes2[\"default\"].number,\n    style: _reactStyleProptype2[\"default\"],\n    theme: _propTypes2[\"default\"].shape({\n      container: _propTypes2[\"default\"].string,\n      editable: _propTypes2[\"default\"].string,\n      innerknob: _propTypes2[\"default\"].string,\n      innerprogress: _propTypes2[\"default\"].string,\n      input: _propTypes2[\"default\"].string,\n      knob: _propTypes2[\"default\"].string,\n      pinned: _propTypes2[\"default\"].string,\n      pressed: _propTypes2[\"default\"].string,\n      progress: _propTypes2[\"default\"].string,\n      ring: _propTypes2[\"default\"].string,\n      slider: _propTypes2[\"default\"].string,\n      snap: _propTypes2[\"default\"].string,\n      snaps: _propTypes2[\"default\"].string\n    }),\n    value: _propTypes2[\"default\"].number\n  };\n  Slider.defaultProps = {\n    buffer: 0,\n    className: '',\n    editable: false,\n    max: 100,\n    min: 0,\n    onDragStart: function onDragStart() {},\n    onDragStop: function onDragStop() {},\n    pinned: false,\n    snaps: false,\n    step: 0.01,\n    value: 0\n  };\n  return Slider;\n};\n\nvar Slider = factory(_ProgressBar2[\"default\"], _Input2[\"default\"]);\nexports[\"default\"] = (0, _reactCssThemr.themr)(_identifiers.SLIDER)(Slider);\nexports.sliderFactory = factory;\nexports.Slider = Slider;","map":null,"metadata":{},"sourceType":"module"}